# HG changeset patch
# Parent bcef32515512608823483d02cf9e6ffbc1899f1b

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -277,7 +277,7 @@ noinst_HEADERS = \
 	include/hrtimer.h	include/identify.h	\
 	include/inputdevice.h	include/joystick.h	\
 	include/keyboard.h	include/keybuf.h	\
-	include/memory.h	\
+	include/memory.h	include/libdisk.h	\
 	include/native2amiga.h	include/newcpu.h	\
 	include/noflags.h	include/options.h	\
 	include/osemu.h		include/picasso96.h	\
@@ -318,7 +318,7 @@ uae_SOURCES = \
 	native2amiga.c disk.c crc32.c savestate.c unzip.c \
 	uaeexe.c uaelib.c fdi2raw.c hotkeys.c \
 	ar.c driveclick.c enforcer.c misc.c \
-	missing.c readcpu.c
+	missing.c readcpu.c libdisk.c
 
 
 EXTRA_uae_SOURCES = \
@@ -416,7 +416,7 @@ am_uae_OBJECTS = main.$(OBJEXT) newcpu.$
 	uaeexe.$(OBJEXT) uaelib.$(OBJEXT) fdi2raw.$(OBJEXT) \
 	hotkeys.$(OBJEXT) ar.$(OBJEXT) driveclick.$(OBJEXT) \
 	enforcer.$(OBJEXT) misc.$(OBJEXT) missing.$(OBJEXT) \
-	readcpu.$(OBJEXT)
+	readcpu.$(OBJEXT) libdisk.$(OBJEXT)
 uae_OBJECTS = $(am_uae_OBJECTS)
 uae_LDFLAGS =
 SCRIPTS = $(dist_noinst_SCRIPTS)
@@ -463,7 +463,7 @@ am__depfiles_maybe = depfiles
 @AMDEP_TRUE@	./$(DEPDIR)/traps.Po ./$(DEPDIR)/tui.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/uaeexe.Po ./$(DEPDIR)/uaelib.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/unzip.Po ./$(DEPDIR)/writelog.Po \
-@AMDEP_TRUE@	./$(DEPDIR)/zfile.Po
+@AMDEP_TRUE@	./$(DEPDIR)/zfile.Po ./$(DEPDIR)/libdisk.Po
 COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
 	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
 CCLD = $(CC)
@@ -575,6 +575,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/custom.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/debug.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/disk.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libdisk.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/drawing.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/driveclick.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/enforcer.Po@am__quote@
diff --git a/src/disk.c b/src/disk.c
--- a/src/disk.c
+++ b/src/disk.c
@@ -43,6 +43,7 @@
 #include "caps.h"
 #endif
 #endif
+#include "libdisk.h"
 #include "crc32.h"
 
 #include <ctype.h>
@@ -135,7 +136,7 @@ typedef struct {
 #define DRIVE_ID_35HD  0xAAAAAAAA
 #define DRIVE_ID_525SD 0x55555555 /* 40 track 5.25 drive , kickstart does not recognize this */
 
-typedef enum { ADF_NORMAL, ADF_EXT1, ADF_EXT2, ADF_FDI, ADF_IPF, ADF_CATWEASEL, ADF_PCDOS } drive_filetype;
+typedef enum { ADF_NORMAL, ADF_EXT1, ADF_EXT2, ADF_FDI, ADF_IPF, ADF_CATWEASEL, ADF_PCDOS, ADF_LIBDISK } drive_filetype;
 typedef struct {
     struct zfile *diskfile;
     struct zfile *writediskfile;
@@ -553,6 +554,9 @@ static void drive_image_free (drive *drv
 	caps_unloadimage (drv - floppy);
 #endif
 	break;
+	case ADF_LIBDISK:
+            libdisk_close(drv - floppy);
+	break;
 	case ADF_FDI:
 #ifdef FDI2RAW
 	fdi2raw_header_free (drv->fdi);
@@ -980,6 +984,12 @@ static int drive_insert (drive * drv, st
 	    tid->offs = i * 512 * drv->num_secs;
 	}
 
+    } else if (libdisk_open(fname, drv-floppy)) {
+
+	drv->wrprot = 1;
+	drv->num_tracks = 160;
+	drv->filetype = ADF_LIBDISK;
+
     } else {
 	unsigned int i;
 
@@ -1423,6 +1433,10 @@ static void drive_fill_bigbuf (drive * d
 	caps_loadtrack (drv->bigmfmbuf, drv->tracktiming, drv - floppy, tr, &drv->tracklen, &drv->multi_revolution, &drv->skipoffset);
 #endif
 
+    } else if (drv->filetype == ADF_LIBDISK) {
+
+	libdisk_loadtrack (drv->bigmfmbuf, drv->tracktiming, drv - floppy, tr, &drv->tracklen, &drv->multi_revolution, &drv->skipoffset);
+
     } else if (drv->filetype == ADF_FDI) {
 
 #ifdef FDI2RAW
@@ -1780,6 +1794,7 @@ static void drive_write_data (drive * dr
 	}
 	return;
     case ADF_IPF:
+    case ADF_LIBDISK:
 	break;
     case ADF_PCDOS:
 	ret = drive_write_pcdos (drv);
@@ -2333,6 +2348,9 @@ static void fetchnextrevolution (drive *
 	caps_loadrevolution (drv->bigmfmbuf, drv - floppy, drv->cyl * 2 + side, &drv->tracklen);
 #endif
 	break;
+	case ADF_LIBDISK:
+	libdisk_loadrevolution (drv->bigmfmbuf, drv - floppy, drv->tracktiming, &drv->tracklen);
+	break;
 	case ADF_FDI:
 #ifdef FDI2RAW
 	fdi2raw_loadrevolution (drv->fdi, drv->bigmfmbuf, drv->tracktiming, drv->cyl * 2 + side, &drv->tracklen, 1);
diff --git a/src/include/libdisk.h b/src/include/libdisk.h
new file mode 100755
--- /dev/null
+++ b/src/include/libdisk.h
@@ -0,0 +1,10 @@
+
+int libdisk_open(const char *name, unsigned int drv);
+void libdisk_close(unsigned int drv);
+int  libdisk_loadtrack(
+    uae_u16 *mfmbuf, uae_u16 *tracktiming, unsigned int drv,
+    unsigned int track, unsigned int *tracklength, int *multirev,
+    unsigned int *gapoffset);
+int  libdisk_loadrevolution(
+    uae_u16 *mfmbuf, unsigned int drv, uae_u16 *tracktiming,
+    unsigned int *tracklength);
diff --git a/src/libdisk.c b/src/libdisk.c
new file mode 100644
--- /dev/null
+++ b/src/libdisk.c
@@ -0,0 +1,135 @@
+
+#include "sysconfig.h"
+#include "sysdeps.h"
+#include <stdint.h>
+#include <dlfcn.h>
+#include "err.h"
+#include "libdisk.h"
+#include <arpa/inet.h>
+
+#include <libdisk/disk.h>
+
+struct disk;
+static struct disk *disk[4];
+static unsigned int saved_track[4];
+
+static struct disklib {
+    int warned;
+    unsigned int ref;
+    void *handle;
+    struct disk *(*disk_open)(const char *name, int read_only);
+    void (*disk_close)(struct disk *);
+    struct track_mfm *(*track_mfm_get)(struct disk *d, unsigned int tracknr);
+    void (*track_mfm_put)(struct track_mfm *);
+    void (*track_write_mfm)(
+        struct disk *, unsigned int tracknr, struct track_mfm *);
+} disklib;
+
+#define DISKLIB_NAME    "libdisk.so.0"
+
+static int load_libdisk(void)
+{
+    if ( disklib.ref++ )
+        return 1;
+
+    if ( (disklib.handle = dlopen(DISKLIB_NAME, RTLD_LAZY)) == NULL )
+        goto fail_no_handle;
+
+#define GETSYM(sym)                             \
+    disklib.sym = dlsym(disklib.handle, #sym);  \
+    if ( dlerror() != 0 ) goto fail;
+    GETSYM(disk_open);
+    GETSYM(disk_close);
+    GETSYM(track_mfm_get);
+    GETSYM(track_mfm_put);
+    GETSYM(track_write_mfm);
+#undef GETSYM
+    return 1;
+
+fail:
+    dlclose(disklib.handle);
+fail_no_handle:
+    warnx("Unable to open " DISKLIB_NAME);
+    --disklib.ref;
+    if ( !disklib.warned )
+    {
+        disklib.warned = 1;
+        gui_message ("This disk image needs the libdisk plugin\n"
+                     "which is available from\n"
+                     "https://github.org/keirf/Amiga-Disk-Utilities\n");
+    }
+    return 0;
+}
+
+static void put_libdisk(void)
+{
+    if ( --disklib.ref )
+        return;
+    dlclose(disklib.handle);
+}
+
+int libdisk_open(const char *name, unsigned int drv)
+{
+    const char *p = strrchr(name, '.');
+
+    if ( !p || strcmp(p, ".dsk") )
+        return 0;
+    if ( !load_libdisk() )
+        return 0;
+    if ( disk[drv] )
+        disklib.disk_close(disk[drv]);
+    disk[drv] = disklib.disk_open(name, 1);
+    if ( !disk[drv] )
+        put_libdisk();
+    return disk[drv] != NULL;
+}
+
+void libdisk_close(unsigned int drv)
+{
+    if ( disk[drv] )
+    {
+        disklib.disk_close(disk[drv]);
+        put_libdisk();
+    }
+    disk[drv] = NULL;
+}
+
+static void getrev(unsigned int drv, uae_u16 *mfmbuf, uae_u16 *tracktiming,
+                   unsigned int *tracklength)
+{
+    struct track_mfm *tmfm;
+    unsigned int i;
+
+    tmfm = disklib.track_mfm_get(disk[drv], saved_track[drv]);
+    *tracklength = tmfm->bitlen;
+
+    memcpy(mfmbuf, tmfm->mfm, (tmfm->bitlen+7)/8);
+    for ( i = 0; i < (((tmfm->bitlen+7)/8)+1)/2; i++ )
+        mfmbuf[i] = ntohs(mfmbuf[i]);
+
+    memcpy(tracktiming, tmfm->speed, 2*((tmfm->bitlen+7)/8));
+
+    disklib.track_mfm_put(tmfm);
+}
+
+int libdisk_loadtrack(
+    uae_u16 *mfmbuf, uae_u16 *tracktiming, unsigned int drv,
+    unsigned int track, unsigned int *tracklength, int *multirev,
+    unsigned int *gapoffset)
+{
+    saved_track[drv] = track;
+
+    *multirev = 0;
+    *gapoffset = -1;
+
+    getrev(drv, mfmbuf, tracktiming, tracklength);
+    return 1;
+}
+
+int libdisk_loadrevolution(
+    uae_u16 *mfmbuf, unsigned int drv, uae_u16 *tracktiming,
+    unsigned int *tracklength)
+{
+    getrev(drv, mfmbuf, tracktiming, tracklength);
+    return 1;
+}
