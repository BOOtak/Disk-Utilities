# HG changeset patch
# Parent 0f74cbebda0091554fafa6c264f5cdfa13f8f4dd

diff -r 0f74cbebda00 src/drawing.c
--- a/src/drawing.c	Thu May 26 11:52:26 2011 +0100
+++ b/src/drawing.c	Thu May 26 17:01:47 2011 +0100
@@ -1914,6 +1914,9 @@ void vsync_handle_redraw (int long_frame
 	    savestate_state = STATE_RESTORE;
 	    reset_drawing ();
 	    uae_reset (0);
+	} else if (savestate_state == STATE_DOSAVE) {
+            savestate_state = 0;
+            save_state(savestate_fname, "Description");
 	} else if (savestate_state == STATE_DOREWIND) {
 	    savestate_state = STATE_REWIND;
 	    reset_drawing ();
diff -r 0f74cbebda00 src/gui-gtk/gtkui.c
--- a/src/gui-gtk/gtkui.c	Thu May 26 11:52:26 2011 +0100
+++ b/src/gui-gtk/gtkui.c	Thu May 26 17:01:47 2011 +0100
@@ -159,7 +159,9 @@ enum gui_commands {
     GUICMD_UPDATE,       // Refresh your state from changed preferences
     GUICMD_DISKCHANGE,   // Hey! A disk has been changed. Do something!
     GUICMD_MSGBOX,       // Display a message box for me, please
-    GUICMD_FLOPPYDLG     // Open a floppy insert dialog
+    GUICMD_FLOPPYDLG,    // Open a floppy insert dialog
+    GUICMD_SAVEDLG,      /* Open a save image dialog */
+    GUICMD_RESTOREDLG    /* Open a restore image dialog */
 };
 
 enum uae_commands {
@@ -491,6 +493,78 @@ static void update_buttons (int state)
     }
 }
 
+static GtkWidget *save_sel, *restore_sel;
+static char *last_savestate_dir;
+
+static void on_filesel_close(GtkWidget **psel, gpointer data)
+{
+    gtk_widget_destroy(*psel);
+    *psel = NULL;
+}
+
+static void on_filesel_ok(GtkWidget **psel, gpointer data)
+{
+    const gchar *fname = gtk_file_selection_get_filename(
+        GTK_FILE_SELECTION(*psel));
+    char *name;
+
+    if (fname && strlen(fname)) {
+        if ((name = malloc(strlen(fname)+1)) == NULL) {
+            write_log("Unable to alloc savestate string\n");
+            goto out;
+        }
+        strcpy(name, fname);
+        free(last_savestate_dir);
+        last_savestate_dir = name;
+
+        savestate_initsave(name, 1);
+        savestate_state = (psel == &save_sel) ? STATE_DOSAVE : STATE_DORESTORE;
+    }
+
+out:
+    gtk_widget_destroy(*psel);
+    *psel = NULL;
+}
+
+static void saverestore_dialog(int cmd)
+{
+    GtkWidget **psel = (cmd == GUICMD_SAVEDLG) ? &save_sel : &restore_sel;
+    char *title = (cmd == GUICMD_SAVEDLG)
+        ? "Select file to save to" : "Select file to restore from";
+
+    if (*psel != NULL)
+        return;
+
+    if (last_savestate_dir == NULL)
+        last_savestate_dir = my_strdup(prefs_get_attr("savestate_path"));
+
+    *psel = gtk_file_selection_new(title);
+    if (*psel == NULL) {
+        write_log("Unable to create file dialog\n");
+        return;
+    }
+
+    gtk_file_selection_set_filename(
+        GTK_FILE_SELECTION(*psel), last_savestate_dir);
+
+    gtk_signal_connect_object(
+        GTK_OBJECT(*psel),
+        "destroy",
+        (GtkSignalFunc)on_filesel_close,
+        (gpointer)psel);
+    gtk_signal_connect_object(
+        GTK_OBJECT(GTK_FILE_SELECTION(*psel)->ok_button),
+        "clicked",
+        (GtkSignalFunc)on_filesel_ok,
+        (gpointer)psel);
+    gtk_signal_connect_object(
+        GTK_OBJECT(GTK_FILE_SELECTION(*psel)->cancel_button),
+        "clicked",
+        (GtkSignalFunc)on_filesel_close,
+        (gpointer)psel);
+
+    gtk_widget_show(*psel);
+}
 
 #define MY_IDLE_PERIOD        250
 #define LEDS_CALLBACK_PERIOD  1000
@@ -556,6 +630,10 @@ static int my_idle (void)
 	    floppyfileentry_do_dialog (FLOPPYFILEENTRY (floppy_widget[n]));
 	    break;
 #endif
+        case GUICMD_SAVEDLG:
+        case GUICMD_RESTOREDLG:
+            saverestore_dialog(cmd);
+            break;
 	}
     }
     return 1;
@@ -2229,6 +2307,12 @@ void gui_display (int shortcut)
 	    write_comm_pipe_int (&to_gui_pipe, GUICMD_FLOPPYDLG, 0);
 	    write_comm_pipe_int (&to_gui_pipe, shortcut, 1);
 	}
+
+        if (shortcut == 5)
+            write_comm_pipe_int (&to_gui_pipe, GUICMD_SAVEDLG, 0);
+
+        if (shortcut == 4)
+            write_comm_pipe_int (&to_gui_pipe, GUICMD_RESTOREDLG, 0);
     }
 }
 
